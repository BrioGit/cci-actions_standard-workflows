name: Upload Unlocked Package Production Release

on:
  workflow_call:
    secrets:
      dev-hub-auth-url:
        required: true
      openai-api-key:
        required: false
    inputs:
      cumulusci-version:
        required: false
        type: string
      org-name:
        required: false
        type: string
        default: dev

jobs:
  upload-beta-release:
    name: "Upload Production Release (Unlocked Package)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: project_repo

      - uses: nimba-actions/run-flow-scratch@v1 
        with:
          dev-hub-auth-url: '${{ secrets.dev-hub-auth-url }}'
          org-name: '${{ inputs.org-name }}'
          cumulusci-version: '${{ inputs.cumulusci-version }}'
          flow-name: release_unlocked_production

      - name: Check for OpenAI API Key
        id: check_api_key
        run: |
          if [ -z "${{ secrets.openai-api-key }}" ]; then
            echo "openai_key_provided=false" >> $GITHUB_ENV
          else
            echo "openai_key_provided=true" >> $GITHUB_ENV
          fi

      - name: Generate Additional Release Notes
        if: env.openai_key_provided == 'true'
        run: |
          # Get commit history for the current release
          git log --pretty=format:"%h %s" $(git describe --tags --abbrev=0 @^)..@ > commit_history.txt
          
          # Prepare request payload for ChatGPT API
          cat <<EOF > payload.json
          {
            "model": "gpt-4",
            "messages": [
              {"role": "system", "content": "You are an assistant that summarizes commit histories into concise release notes."},
              {"role": "user", "content": "Here is the commit history:\n$(cat commit_history.txt)\n\nGenerate a markdown summary of the release notes based on this history."}
            ]
          }
          EOF

          # Send commit history to ChatGPT API
          curl -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.openai-api-key }}" \
            -H "Content-Type: application/json" \
            -d @payload.json > chatgpt_response.json

          # Extract ChatGPT's response
          jq -r '.choices[0].message.content' chatgpt_response.json > additional_notes.md

          # Append ChatGPT's output to release notes
          echo "## Additional Release Notes" >> release-notes.md
          cat additional_notes.md >> release-notes.md
        working-directory: project_repo

      - name: Append Primitive Release Notes to Full Release Notes
        run: |
          cat release-notes.md >> full-release-notes.md
          mv full-release-notes.md release-notes.md
        working-directory: project_repo
